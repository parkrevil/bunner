---
description: Bunner 프레임워크
alwaysApply: true
---

# Bunner 프레임워크

## 목적
Bunner는 Bun 런타임을 위한 Express.js 스타일의 웹 프레임워크입니다. Bun의 고성능 특성을 활용하면서도 Node.js 개발자들이 익숙한 API를 제공합니다.

## 주요 기능
- **HTTP 서버**: Bun.serve() 기반의 고성능 HTTP 서버
- **라우팅**: Express.js 스타일의 라우팅 시스템. 정적 파일 서빙.
- **미들웨어**: CORS 등 미들웨어 지원
- **타입 안전성**: TypeScript 기반의 완전한 타입 지원
- **테스트**: Bun:test를 활용한 Unit, E2E 테스트 지원

## 디렉토리 구조
```
/
├── src/                   # 프레임워크 핵심 소스 코드
│   ├── bunner.ts          # 메인 Bunner 클래스
│   ├── types.ts           # 타입 정의
│   ├── interfaces.ts      # 인터페이스 정의
│   ├── enums.ts           # 열거형 정의
│   ├── request.ts         # BunnerRequest 클래스
│   ├── response.ts        # BunnerResponse 클래스
│   ├── helpers.ts         # 유틸리티 함수
│   └── middlewares/       # 미들웨어 구현
├── test/                  # 테스트 파일들
│   ├── e2e/              # E2E 테스트
│   └── assets/           # 테스트 자산
├── index.ts              # 프레임워크 진입점
├── package.json          # 프레임워크 의존성
└── tsconfig.json         # TypeScript 설정
```

## 개발 규칙
### 공통
- **타입 안전성**: 모든 API에 완전한 TypeScript 타입 제공
- **성능 최적화**: Bun의 고성능 특성을 최대한 활용. Bun 네이티브 기능을 최대한 활용

### 애플리케이션
- **API 설계**: Express.js와 유사하되 Bun 네이티브 API 활용
- **미들웨어 구조**: 각 미들웨어는 자체 디렉토리에 명확한 인터페이스 제공

## 테스트
- **타입 안전성**: 모든 API에 완전한 TypeScript 타입 제공
- **성능 최적화**: Bun의 고성능 특성을 최대한 활용. Bun 네이티브 기능을 최대한 활용
- **범위**: 모든 기능및 로직에 대한 Unit Test, E2E Test 필수
- **파일명**: `{목적 및 기능}.test.ts` 의 형태로 사용
- **케이스**: Should be, Should not be 의 경우를 모두 포함. 꼼꼼한 조건 작성으로 Exception Case, Corner cases 를 최대한 없앤다
- **커버리지**: Unit, E2E Test 작성 후 커버리지 실행. `bunfig.toml`의 커버리지 설정 따라 Unit, E2E Test 업데이트
- **성능**
  - **테스트 조건**
    - 모든 기능을 off 하고 비어있는 GET Request로 스트레스 테스트
    - 프레임워크의 모든 기능을 사용하여 스트레스 테스트
  - **비교 대상**
    - 비교 대상 항목들은 테스트 조건에 해당하는 모든 테스트를 한다.
    - Bun 실행:  Express.js, Fastify, Elysia, Hono
    - Node 실행: Express.js, Fastify
